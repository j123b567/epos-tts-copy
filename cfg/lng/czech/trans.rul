#
#	(c) Jirka Hanika <geo@ff.cuni.cz>
#

$voiced    = bdïgvz¾Z®hø
$voiceless = pt»kfs¹cèxØ
# $fric      = sz¹¾fvhx
# $afric     = cZè®
# $stop      = pt»kbdïg
$nasal     = mnòN
$NASAL     = MQÒW
$sonant    = jlr$nasal
$SONANT    = JLR$NASAL
$short     = aeiouyì
$long      = áéíóúýì
$diphtong  = OAE
$vowel     = $short$long$diphtong
$consonant = $voiced$voiceless$sonant
$everywhere= !_!
$numbers   = 1234567890
$sonority  = 0'<$voiceless$voiced$SONANT<$nasal<l<rj<$vowel   ;l<r viz "umrlec" etc. Ani systematické, ani bezpeèné.

$lower_case = aábcèdïeéìfghiíjklmnòoópqrøs¹t»uúùvwxyýz¾
$upper_case = AÁBCÈDÏEÉÌFGHIÍJKLMNÒOÓPQRØS©T«UÚÙVWXYÝZ®
$letter = ${lower_case}${upper_case}

#  \Z oznaèuje teèku oznaèující øadovou èíslovku.  Tu je nutno rozli¹it
#  od teèky obyèejné, vìtu vydìlující, ne¾li se ztratí rozdíl mezi velkými
#  a malými písmeny.  Následuje-li toti¾ za teèkou velké písmeno, posuzuje
#  se v¾dy jako konec vìty.
#  Nìkteré významy teèky, jako napø. desetinná teèka, u¾ vyøe¹il parser,
#  a to nezávisle na jazyce.  Ty tedy není nutno brát v potaz.

inside .  sent
{
	regex /([0123456789])\$/\1\Z/	word
}
regex  /(\Z)\\.([${lower_case}])/\1\2/	text
regex  /\Z(\\.)([${upper_case}])/\1\2/	text

# rùzné zkratky

subst   short.dic

# Pravidla pro ètení zkratek apod.: velké písmeno na jiném,
#   ne¾ prvním místì ve slovì indikuje zkratku a hláskuje se.
#   Stejnì tak jednotlivé písmeno pøed nebo za cifrou nebo
#   speciálním znakem nebo hláskovanou èástí slova.

regress  ${upper_case}>${lower_case}(0_${lower_case})			word
regress  ${upper_case}>${lower_case}(0_${lower_case})			colon
regress	 ${lower_case}>${upper_case}(0_!${lower_case})			colon
regress  ${lower_case}>${upper_case}(!${lower_case}_!$letter)		colon
if	spellout
{
	regex	/^([^\Y\ ~]*)(.\?)\$/\1\Y\1\2/	word
	progress ${lower_case}>${upper_case}(\Y${upper_case}_!)
	regex	/\Y/./		text
}
subst	 abbrevs.dic							colon
regress  ${upper_case}>${lower_case}($everywhere)			colon


@include "numerals.rul"

 subst	   main.dic		   ;Rùzné výjimky

 progress  ù>ú($everywhere)

 progress  0>s(x_!)
 progress  u0>0v(q_!)              ; Rozlo¾ení x,q na ks, kv
 regress   xq>k($everywhere)
 regress   h>x(c_!)                ; Spøe¾ka ch > x
 regress   z¾>Z®(d_!)              ; Spøe¾ky dz,d¾ > Z,®
 progress  cd>0(!_xZ®)
 progress  h>x(s_!)                ; Pra¾ské sh

# Následující pravidla jednak zmìní vìty vydìlené dvojteèkou
#   na vìty vydìlené teèkou (to je spí¹e ¹patnì ne¾ dobøe),
#   dále pak oznaèí dvojteèkou (místo otazníku) ty vìty, které
#   obsahovaly ve své první klausi nìkteré ze slov uvedených
#   ve slovníku wh.dic, nemìly tuto klausi zvlá¹» vydìlenou
#   ¾ádnou interpunkcí, a byly samy vydìleny otazníkem.
#
# Fonetik vidí, ¾e jsem právì "definoval" doplòovací otázky.

 progress  :>.($everywhere)	text	sent
 subst     wh.dic				; Doplòovací otázky
 raise     Q:_			colon	phone
 progress  Q>_(!0_!)		sent	colon	;  jen v první klausi
 raise     Q:?			sent	colon
 progress  Q>0($everywhere)			;  úklid v¹ech úrovní
 progress  Q>_($everywhere)	sent	colon
 progress  Q>:($everywhere)	text	sent

 if        colloquial
 {
	regress j>J(0_ds)	; fixme: random environment
 }

 regress   i>j($vowel_0)   syll
 subst     syll.dic		; Rozsadit vokály
 regress   0>'(0_$vowel)	; Rázy

 with	preps.dic		word	word
 {
	regress   _\ ~>P(!_!)	word   word
 }
 with	"se"
 {
	regress   _\ ~>P(!_!)	word   word	; "se" nesmí být v preps.dic
 }
 regress	P>\ (!_P)	colon  word	; dvì pøedlo¾ky za sebou

 regress  _\ ~>F(!_0)		colon	word

 progress  0>S(!S_sz¹¾)	 colon  
 progress  S>0(!_!0)     word   ; "S" jen pøed hranicí slov, za ní¾ je sykavka
 progress  0>S(0_s)	 colon	; "S" pøed první hláskou v klausi
 inside  P
 {
	prep	"Sse,se seS,se SseS,se"	  ; "se" jako pøedlo¾ka
 }
 progress  S>0($everywhere)

 inside	 P			word
 {
	prep	preps.dic	word
 }
 progress  P>\ ($everywhere)	word	word

 regress   b>0(!_b)	syll	; pochybný heuristický odstaveèek
 regress   n>0(!_nò)	syll	; namíøený proti geminátám
 regress   s>0(!_s)	syll
 regress   t>0(!_t)	syll
 regress   f>0(!_f)	syll

 progress  ø>Ø($voiceless_!0) syll ; je u¾ zde kvùli "k øízení [gøízeòí]" "køeè [kØeè]"

 regress   $sonant>$SONANT(0_!)  syll
 syll      $sonority	syll	; Rozklad_na_slabiky
 regress   $SONANT>$sonant(!_!)

 prep	nonsyl.dic		syll


#   postp     postps.dic              ; jednou by se mìlo vrátit

 regress   h>0(t_!)		; pathologie, plethora, thanatos. Pochybné.

 regress   $voiced>${voiceless}(!_$voiceless&0')       	; Asimilace znìlosti
 regress   $voiceless>$voiced(!_$voiced!v)       colon

 if	   colloquial
 {
	subst	casual.dic
	regress J>0(!_!)
	regress '>v(!_o)	; "okno" [vokno]
 }

 regress   0>n(m_ì)
 regress   dtn>ï»ò(!_iíì)
 regress   ì>e(ï»ò_!)
 regress   0>j(!_ì)
 regress   ì>e($everywhere)

 progress  yý>ií($everywhere)

 progress  tkfslmn>TKFSLMN(i_0)
 progress  i>j(oae_TKFSLMN)
 progress  TKFSLMN>tkfslmn(!_!)

 progress  n>N(!_kg)

 progress  w>u($vowel_$consonant&0)
 progress  w>v($everywhere)     ; vìt¹inou ale "w" odstraní výjimky, øeknìme

				; zde bývala eliminace geminát
				; zde býval rozklad na slabiky


 progress  oae>OAE(!_u)	syll	; Dvojhlásky
 regress   u>0(OAE_!)	syll

 if  !voiced_affrs
 {
	regress   Z®>DÏ(!_$vowel)	; toto by mìlo pøijít do inventáøe (traditnl.dph);
	regress   0>d(!_DÏ)		; rozkládá se zde dz, d¾ (representované Z,®)
	regress   DÏ>z¾(!_!)		; na d-z, d-¾, pokud následuje vokál.
 }

# progress  0>~($vowel_0) syll	; Oznaèení otevøených vokalických slabik tildou
# raise     ~:!		 syll	; FIXME!!!! slabikotvorné
# progress  ~>0($vowel_0) syll

# Následující odstavec má za cíl oznaèit v¹echny otevøené slabiky tildou.
#   Ve zavøených slabikách se objeví pøíznak "C" (coda), ten se pak posune
#   do slabièné úrovnì, tam se pak nezavøené slabiky prohlásí za otevøené
#   a pak u¾ je mo¾no C odstranit z hláskové i slabièné úrovnì.

$syllabic = !0$vowel_!0$vowel	; syllabic consonant (environment)

 progress   0>C($vowel_!0)		 syll	 ; C za nekoncovou samohlásku
 progress   $sonant>$SONANT($syllabic)   syll
 progress   0>C($SONANT_!) 		 syll	 ; C za slabikotvornou sonoru
 progress   $SONANT>$sonant($everywhere) syll
 raise      C:!			  	 syll	 ; posuò "C" do slabièné úrovnì
 progress   _|>~($everywhere)		 word	syll
 progress   C>_($everywhere)		 word	syll
 progress   C>0($everywhere)		 syll	phone

