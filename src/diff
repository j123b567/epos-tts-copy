Only in ep2-4-37pre1/arch/unix: epos.ini
diff -ur /rh/home/geo/epos/tmp/epos/src/agent.cc ep2-4-37pre1/src/agent.cc
--- /rh/home/geo/epos/tmp/epos/src/agent.cc	Sun Oct 10 00:35:45 1999
+++ ep2-4-37pre1/src/agent.cc	Mon Feb 21 15:16:36 2000
@@ -44,6 +44,12 @@
 	#include <sys/stat.h>
 #endif
 
+#ifdef HAVE_MMSYSTEM_H
+	#include <mmsystem.h>
+	#include <windows.h>
+	#include <windowsx.h>
+#endif
+
 #include <fcntl.h>
 #include <errno.h>
 
@@ -54,6 +60,67 @@
 
 #define DARK_ERRLOG 2	/* 2 == stderr; for global stdshriek and stddbg output */
 
+#ifdef HAVE_MMSYSTEM_H
+/* WndProc - Main window procedure function.
+ */
+HWAVEOUT       hWaveOut = NULL;
+LPWAVEHDR      lpWaveHdr   = NULL;
+
+void CALLBACK WndProc(
+  HWAVEOUT hwo,      
+  UINT uMsg,         
+  DWORD dwInstance,  
+  DWORD wParam,    
+  DWORD lParam     
+)
+//LONG FAR PASCAL WndProc(
+//HWND hWnd,
+//UINT msg,
+//WPARAM wParam,
+//LPARAM lParam)
+{
+   switch (uMsg)
+   {
+      //HANDLE_MSG(hWnd, WM_DESTROY, ReverseOnDestroy);
+
+      //HANDLE_MSG(hWnd, WM_SYSCOMMAND, ReverseOnSysCommand);
+
+      //case WM_SETFOCUS:
+         //SetFocus(hwndName);
+         //return 0;
+
+      //HANDLE_MSG(hWnd, WM_COMMAND, ReverseOnCommand);
+      case MM_WOM_DONE:
+         /* This message indicates a waveform data block has
+          * been played and can be freed. Clean up the
+          * preparation done previously on the header.
+          */
+//         waveOutUnprepareHeader( (HWAVEOUT) wParam,
+//            (LPWAVEHDR) lParam, sizeof(WAVEHDR) );
+         waveOutUnprepareHeader( hwo, lpWaveHdr, sizeof(WAVEHDR) );
+
+         /* free all memory associated with the data block
+          */
+         //cleanup();
+         /* Close the waveform output device.
+          */
+//         waveOutClose( (HWAVEOUT) wParam );
+         waveOutClose( hwo );
+         hWaveOut = NULL;
+
+         /* Reenable both button controls.
+          */
+         //EnableWindow( hwndPlay, TRUE );
+         //EnableWindow( hwndQuit, TRUE );
+         //SetFocus(hwndName);
+
+         break;
+   }
+//   return 0; //MyDefProc(hWnd,msg,wParam,lParam);
+}
+#endif
+
+
 agent::agent(DATA_TYPE typein, DATA_TYPE typeout)
 {
 	in = typein, out = typeout;
@@ -456,7 +523,11 @@
 			  if (socket == -1) shriek(445, fmt("Cannot open file %s", par));
 			  else close_upon_exit = true;
 			  break;
+#ifdef HAVE_MMSYSTEM_H
+		case '#': socket = -2; //special_io(par + 1, in);
+#else
 		case '#': socket = special_io(par + 1, in);
+#endif
 			  break;
 		default:  shriek(462, "unimplemented i/o agent class");
 			/* if ever adding classes, take care of closing/nonclosing
@@ -602,6 +673,7 @@
 	}
 }
 
+
 class oa_ascii : public a_output
 {
 	virtual int insize() {
@@ -646,6 +718,66 @@
 oa_wavefm::run()
 {
 	wavefm *w = (wavefm *)inb;
+#ifdef HAVE_MMSYSTEM_H
+//	HWAVEOUT       hWaveOut = NULL;
+//	LPWAVEHDR      lpWaveHdr   = NULL;
+//	HPSTR          lpData      = NULL;     // waveform data block
+	DWORD          dwResult;
+//	HANDLE         hFormat;
+	WAVEFORMATEX   pFormat;
+//	DWORD          dwDataSize;
+
+	if (socket == -2) {
+	pFormat.wFormatTag = WAVE_FORMAT_PCM;
+	pFormat.wBitsPerSample = w->hdr.wlenb;
+	pFormat.nSamplesPerSec = w->hdr.sf1;
+	pFormat.nChannels = w->hdr.numchan;
+	pFormat.nBlockAlign = w->hdr.wlenB;
+	pFormat.nAvgBytesPerSec = w->hdr.avr1;
+	pFormat.cbSize = 0;
+	#if (WINVER >= 0x0400)
+		if (waveOutOpen(&hWaveOut, WAVE_MAPPER, &pFormat, 0, 0L,
+               WAVE_FORMAT_QUERY))
+	#else
+		if (waveOutOpen(&hWaveOut, WAVE_MAPPER, (LPWAVEFORMAT)&pFormat, 0, 0L,
+               WAVE_FORMAT_QUERY))
+	#endif
+	shriek(445, "Wave fmt not supported ...");
+	#if (WINVER >= 0x0400)
+		if (int autobus=waveOutOpen(&hWaveOut, WAVE_MAPPER,
+			&pFormat, (DWORD)&WndProc, 0L, CALLBACK_FUNCTION ))
+//			&pFormat, (UINT)0, 0L, CALLBACK_WINDOW))
+	#else
+		if (waveOutOpen(&hWaveOut, WAVE_MAPPER, 
+			(LPWAVEFORMAT)&pFormat, (DWORD)&WndProc, 0L, CALLBACK_FUNCTION ))
+//			(LPWAVEFORMAT)&pFormat, (UINT)0, 0L, CALLBACK_WINDOW))
+    #endif
+	shriek(445, "Cannot open wave device ...");
+//	lpWaveHdr = (LPWAVEHDR)GlobalAllocPtr(GMEM_MOVEABLE | GMEM_SHARE,
+//                  (DWORD) sizeof(WAVEHDR));
+	lpWaveHdr = (LPWAVEHDR)xmalloc(sizeof(WAVEHDR));
+	if (!lpWaveHdr)
+	shriek(445, "Cannot allocate wave header ...");
+//	lpWaveHdr = (LPWAVEHDR)xmalloc(sizeof(WAVEHDR));
+	lpWaveHdr->lpData = w->buffer;
+	lpWaveHdr->dwBufferLength = w->hdr.buffer_idx;
+	lpWaveHdr->dwFlags = 0L;
+	lpWaveHdr->dwLoops = 0L;
+//	lpWaveHdr->dwFlags = WHDR_ENDLOOP; 
+	if(waveOutPrepareHeader(hWaveOut, lpWaveHdr, sizeof(WAVEHDR)))
+		shriek(445, "Cannot prepare wave header ...");
+	dwResult = waveOutWrite(hWaveOut, lpWaveHdr, sizeof(WAVEHDR));
+	if (dwResult != 0)
+		shriek(445, "Cannot write to wave device ...");
+	report(false, 1);
+	report(true, 1);
+	attached = false;
+//	delete w;
+	inb = NULL;
+	finis(false);
+	} else {
+#endif
+	
 	if (!attached && !sleep_table[socket]) {
 //		report(true, w->written_bytes() /* + sizeof(wave_header) */);
 		w->attach(socket);
@@ -669,6 +801,9 @@
 //		reply("200 output OK");
 		finis(false);
 	}
+#ifdef HAVE_MMSYSTEM_H
+	}
+#endif
 }
 
 void
Only in ep2-4-37pre1/src: chyby.txt
diff -ur /rh/home/geo/epos/tmp/epos/src/common.h ep2-4-37pre1/src/common.h
--- /rh/home/geo/epos/tmp/epos/src/common.h	Thu Nov 11 16:45:15 1999
+++ ep2-4-37pre1/src/common.h	Tue Feb 29 03:37:33 2000
@@ -27,7 +27,7 @@
 
 #define MAINTAINER  "Jirka Hanika"
 #define MAIL        "geo@cuni.cz"
-#define VERSION     "2.4.36"
+#define VERSION     "2.4.37pre1"
 
 #include "config.h"
 
Only in ep2-4-37pre1/src: config.cache
Only in ep2-4-37pre1/src: config.h
Only in ep2-4-37pre1/src: config.log
diff -ur /rh/home/geo/epos/tmp/epos/src/hash.cc ep2-4-37pre1/src/hash.cc
--- /rh/home/geo/epos/tmp/epos/src/hash.cc	Fri Oct  8 01:27:44 1999
+++ ep2-4-37pre1/src/hash.cc	Mon Feb 21 15:25:53 2000
@@ -29,7 +29,7 @@
 #ifdef HAVE_TEMPL_INST
 
 template class hash_table<char, file>;
-// template class hash_table<char, char>;
+template class hash_table<char, char>;
 template class hash_table<char, option>;
 #ifndef MONOLITH
 	template class hash_table<char, a_ttscp>;
Only in ep2-4-37pre1/src: lpcsyn.cc
Only in ep2-4-37pre1/src: lpcsyn.h
diff -ur /rh/home/geo/epos/tmp/epos/src/say.cc ep2-4-37pre1/src/say.cc
--- /rh/home/geo/epos/tmp/epos/src/say.cc	Tue Oct 19 01:54:49 1999
+++ ep2-4-37pre1/src/say.cc	Mon Feb 21 15:27:56 2000
@@ -129,7 +129,7 @@
 			scratch[SCRATCH_SPACE] = 0;
 			sscanf(scratch, "%d", &count);
 			char *b=(char *)malloc(count+1);
-			b[read(datad, b, count)] = 0;
+			b[yread(datad, b, count)] = 0;
 			printf("%s\n", b);
 		}
 	}
diff -ur /rh/home/geo/epos/tmp/epos/src/synth.cc ep2-4-37pre1/src/synth.cc
--- /rh/home/geo/epos/tmp/epos/src/synth.cc	Sat Oct  9 23:25:24 1999
+++ ep2-4-37pre1/src/synth.cc	Mon Feb 21 15:32:44 2000
@@ -18,7 +18,9 @@
 #include "ktdsyn.h"
 #include "ptdsyn.h"
 #include "lpcsyn.h"
+#ifndef MONOLITH
 #include "tcpsyn.h"
+#endif
 
 synth *setup_synth(voice *v)
 {
@@ -26,8 +28,10 @@
 
 	switch (v->type) {
 		case S_NONE:	shriek(813, "This voice is mute");
+#ifndef MONOLITH
 		case S_TCP:	// shriek(462, "Network voices not implemented");
 				return new tcpsyn(v);
+#endif
 #ifdef LPC_H
 		case S_LPC_FLOAT: return new lpcfloat(v);
 		case S_LPC_INT: return new lpcint(v);
