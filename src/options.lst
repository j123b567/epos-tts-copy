/*
 *	epos/src/options.lst
 *	(c) 1997-98 geo@ff.cuni.cz
 *
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License in doc/COPYING for more details.
 *
 *	You should never need to read this file; the documentation
 *	in doc/english/options.sgml should cover at least all
 *	generally useful options.  However, if you suspect it is
 *	incorrect or incomplete, just skip this comment and several
 *	kilobytes of preprocessing directives and you come to the
 *	source-level definition of all existing options, including
 *	unnamed options that cannot be changed from outside.
 *
 *	This file is the only place where the individual options are defined.
 *	It gets included thrice in options.h, options.cc, voice.h and voice.cc
 *	to produce first the declaration, then the definition, and finally,
 *	the array of options to be parsed by load_config().
 *	
 *	Note that you should #define exactly one of the following:
 * 
 *	CONFIG_DECLARE, CONFIG_INITIALIZE, CONFIG_DESCRIBE,
 *	CONFIG_VOICE_DECLARE, CONFIG_VOICE_INITIALIZE, CONFIG_VOICE_DESCRIBE
 *	CONFIG_LANG_DECLARE, CONFIG_LANG_INITIALIZE, CONFIG_LANG_DESCRIBE
 *
 *	when this file is included and any of these flags will be undefined
 *	again when this file is over. They will cause OPTION to be expanded
 *	to a declaration and initialization of the respective member of
 *	struct configuration, and to its corresponding item in the optlist
 *	(which drives the type dependent parsing of the member). VOICE_OPTION
 *	expands to OPTION and, moreover, it will setup a struct voice member
 *	in an analogous way. The same for LNG_OPTION and struct lang.
 *
 *	This scheme (the first three flags) was introduced in version 1.1.6.
 *
 *	The format is obvious. The last field is the default value. 
 */

#ifdef CONFIG_DECLARE

#define BOOL   bool
#define INT    int
#define STR    const char*
#define CHAR   unsigned char
#define ELEM   UNIT
// #define FILE   const char*
#define MARKUP OUT_ML
#define TYPE   SYNTH_TYPE
#define CHANNEL    CHANNEL_TYPE
#define DEBUG_AREA _DEBUG_AREA_

#define OPTION(member,name,type,default) type member;

#define OPTIONAGGR(x) x;
#define OPTIONITEM(w,x,y,z) 
#define OPTIONAGGRENDS 

// #define LNG_OPTIONAGGR(x) OPTIONAGGR(x)
// #define LNG_OPTIONITEM(w,x,y,z) OPTIONITEM(w,x,y,z)
// #define LNG_OPTIONAGGRENDS OPTIONAGGRENDS

#define VOICE_OPTION(member,member_voice,name,type,default) OPTION(member,name,type,default)
#define LNG_OPTION(member,member_lang,name,type,default)  OPTION(member,name,type,default)

#define OPTIONARRAY(member, name, type, default, number)	type member[number];
#define LNG_OPTIONARRAY(member, name, type, default, number)	type member[number];

#undef CONFIG_DECLARE

#else                 //#ifdef CONFIG_INITIALIZE or CONFIG_DESCRIBE or CONFIG_INV*

#ifdef CONFIG_INITIALIZE
#define OPTION(member,name,type,default) cfg->member=default;

#define OPTIONAGGR(x)
#define OPTIONITEM(w,x,y,z) OPTION (w,x,y,z)
#define OPTIONAGGRENDS

// #define LNG_OPTIONAGGR(x) OPTIONAGGR(x)
// #define LNG_OPTIONITEM(w,x,y,z) OPTIONITEM(w,x,y,z)
// #define LNG_OPTIONAGGRENDS OPTIONAGGRENDS

#define VOICE_OPTION(member,member_voice,name,type,default) OPTION(member,name,type,default)
#define LNG_OPTION(member,member_lang,name,type,default)  OPTION(member,name,type,default)

#define OPTIONARRAY(member, name, type, default, number)     do { for (int index=0; index<number; index++) cfg->member[index]=default; } while (0);
#define LNG_OPTIONARRAY(member, name, type, default, number) do { for (int index=0; index<number; index++) cfg->member[index]=default; } while (0);

#undef CONFIG_INITIALIZE

#else                 //#ifdef CONFIG_DESCRIBE or CONFIG_INV*
#ifdef CONFIG_DESCRIBE

#define BOOL   O_BOOL
#define INT    O_INT
#define STR    O_STRING
#define CHAR   O_CHAR
#define ELEM   O_UNIT
// #define FILE   O_FILE
#define MARKUP O_MARKUP
#define TYPE   O_SYNTH
#define CHANNEL    O_CHANNEL
#define DEBUG_AREA O_DBG_AREA

#define OPTION(member,name,type,default) {"C:" name + 2, type, OS_CFG, A_PUBLIC, A_PUBLIC, true, false, (int)&((configuration *)NULL)->member},

#define OPTIONAGGR(x) 
#define OPTIONITEM(w,x,y,z) OPTION (w,x,y,z)
#define OPTIONAGGRENDS 

// #define LNG_OPTIONAGGR(x) OPTIONAGGR(x)
// #define LNG_OPTIONITEM(w,x,y,z) OPTIONITEM(w,x,y,z)
// #define LNG_OPTIONAGGRENDS OPTIONAGGRENDS

#define VOICE_OPTION(member,member_voice,name,type,default) OPTION(member,name,type,default)
#define LNG_OPTION(member,member_lang,name,type,default)  OPTION(member,name,type,default)

#define OPTIONARRAY(member, name, type, default, number) {"C:" name + 2, type, OS_CFG, \
		A_PUBLIC, A_PUBLIC, true, true, (int)&((configuration *)NULL)->member},
#define LNG_OPTIONARRAY(member, name, type, default, number)  \
		OPTIONARRAY(member, name, type, default, number)

#undef CONFIG_DESCRIBE


#else
#ifdef CONFIG_LANG_INITIALIZE

#define OPTIONAGGR(x)
#define OPTIONITEM(w,x,y,z)
#define OPTIONAGGRENDS

// #define LNG_OPTIONAGGR(x)
// #define LNG_OPTIONITEM(w,x,y,z) LNG_OPTION(w,w,x,y,z)
// #define LNG_OPTIONAGGRENDS

#define OPTION(w,x,y,z)
#define VOICE_OPTION(member,member_voice,name,type,default) member_voice = cfg->member;
#define LNG_OPTION(member,member_lang,name,type,default)  member_lang = cfg->member;

#define OPTIONARRAY(member, name, type, default, number)
#define LNG_OPTIONARRAY(member, name, type, default, number)  do { for (int index=0; index<number; index++) member[index] = cfg->member[index]; } while (0);

#undef CONFIG_LANG_INITIALIZE

#else
#ifdef CONFIG_LANG_DECLARE

#define BOOL   bool
#define INT    int
#define STR    const char*
#define CHAR   unsigned char
#define ELEM   UNIT
// #define FILE   const char*
#define MARKUP OUT_ML
#define TYPE   SYNTH_TYPE
#define CHANNEL    CHANNEL_TYPE
#define DEBUG_AREA _DEBUG_AREA_

#define OPTIONAGGR(x)
#define OPTIONITEM(w,x,y,z)
#define OPTIONAGGRENDS

// #define LNG_OPTIONAGGR(x) x;
// #define LNG_OPTIONITEM(w,x,y,z)
// #define LNG_OPTIONAGGRENDS

#define OPTION(w,x,y,z)
#define VOICE_OPTION(member,member_voice,name,type,default)    type  member_voice;
#define LNG_OPTION(member,member_lang,name,type,default)   type  member_lang;

#define OPTIONARRAY(member, name, type, default, number)
#define LNG_OPTIONARRAY(member, name, type, default, number)  type member[number];

#undef CONFIG_LANG_DECLARE

#else
#ifdef CONFIG_LANG_DESCRIBE

#define BOOL   O_BOOL
#define INT    O_INT
#define STR    O_STRING
#define CHAR   O_CHAR
#define ELEM   O_UNIT
// #define FILE   O_FILE
#define MARKUP O_MARKUP
#define TYPE   O_SYNTH
#define CHANNEL    O_CHANNEL
#define DEBUG_AREA O_DBG_AREA

#define OPTIONAGGR(x)
#define OPTIONITEM(w,x,y,z)
#define OPTIONAGGRENDS

// #define LNG_OPTIONAGGR(x) 
// #define LNG_OPTIONITEM(member,name,type,default) {"L:" name + 2, type, OS_LANG, A_PUBLIC, A_PUBLIC, true, false, (int)&((lang *)NULL)->member}, 
// #define LNG_OPTIONAGGRENDS 

#define OPTION(w,x,y,z)
#define VOICE_OPTION(member,member_voice,name,type,default)   {"L:" name + 2, type, OS_LANG, A_PUBLIC, A_PUBLIC, true, false, (int)&((lang *)NULL)->member_voice},
#define LNG_OPTION(member,member_lang,name,type,default)  {"L:" name + 2, type, OS_LANG, A_PUBLIC, A_PUBLIC, true, false, (int)&((lang *)NULL)->member_lang},

#define OPTIONARRAY(member, name, type, default, number)
#define LNG_OPTIONARRAY(member, name, type, default, number) {"L:" name + 2, type, OS_LANG, \
		A_PUBLIC, A_PUBLIC, true, true, (int)&((lang *)NULL)->member},


#undef CONFIG_LANG_DESCRIBE


#else		// VOICE_anything

#define OPTION(w,x,y,z)
#define LNG_OPTION(member,member_lang,name,type,default)
#define OPTIONAGGR(x)
#define OPTIONITEM(w,x,y,z)
#define OPTIONAGGRENDS
#define OPTIONARRAY(member, name, type, default, number)
#define LNG_OPTIONARRAY(member, name, type, default, number)



#ifdef CONFIG_VOICE_INITIALIZE


// #define LNG_OPTIONAGGR(x) OPTIONAGGR(x)
// #define LNG_OPTIONITEM(w,x,y,z) OPTIONITEM(w,x,y,z)
// #define LNG_OPTIONAGGRENDS OPTIONAGGRENDS

#define VOICE_OPTION(member,member_voice,name,type,default)  member_voice = parent_lang->member_voice;

#undef CONFIG_VOICE_INITIALIZE

#else
#ifdef CONFIG_VOICE_DECLARE

#define BOOL   bool
#define INT    int
#define STR    const char*
#define CHAR   unsigned char
#define ELEM   UNIT
// #define FILE   const char*
#define MARKUP OUT_ML
#define TYPE   SYNTH_TYPE
#define CHANNEL    CHANNEL_TYPE
#define DEBUG_AREA _DEBUG_AREA_

// #define LNG_OPTIONAGGR(x) OPTIONAGGR(x)
// #define LNG_OPTIONITEM(w,x,y,z) OPTIONITEM(w,x,y,z)
// #define LNG_OPTIONAGGRENDS OPTIONAGGRENDS

#define VOICE_OPTION(member,member_voice,name,type,default)   type  member_voice;

#undef CONFIG_VOICE_DECLARE

#else
#ifndef CONFIG_VOICE_DESCRIBE
#error Impossible inclusion of config.cc, wheee...
#endif

#define BOOL   O_BOOL
#define INT    O_INT
#define STR    O_STRING
#define CHAR   O_CHAR
#define ELEM   O_UNIT
// #define FILE   O_FILE
#define MARKUP O_MARKUP
#define TYPE   O_SYNTH
#define CHANNEL    O_CHANNEL
#define DEBUG_AREA O_DBG_AREA

// #define LNG_OPTIONAGGR(x) OPTIONAGGR(x)
// #define LNG_OPTIONITEM(w,x,y,z) OPTIONITEM(w,x,y,z)
// #define LNG_OPTIONAGGRENDS OPTIONAGGRENDS

#define VOICE_OPTION(member,member_voice,name,type,default)  {"V:" name + 2, type, OS_VOICE, A_PUBLIC, A_PUBLIC, true, false, (int)&((voice *)NULL)->member_voice},

#undef CONFIG_VOICE_DESCRIBE

#endif                //CONFIG_VOICE_DECLARE
#endif                //CONFIG_VOICE_INITIALIZE
#endif                //CONFIG_LANG_DESCRIBE
#endif                //CONFIG_LANG_DECLARE
#endif                //CONFIG_LANG_INITIALIZE
#endif                //CONFIG_DESCRIBE
#endif                //CONFIG_INITIALIZE
#endif                //CONFIG_DECLARE


/*
 *	The last argument to the following OPTION is only used when
 *	CONFIG_INITIALIZE has been defined (which happens in the
 *	compilation unit where configuration::configuration is to be
 *	defined.  In this compilation unit, BASE_DIR should be defined
 *	externally (with a compiler option).
 *
 *	The following is relatively deep cpp magic.  Please read
 *	info -f cpp -n "Argument Prescan"
 *	if you are curious about the doubly indirect expansion of #s.
 */

# define strfy(s) #s
# define stringify(s) strfy(s)
# ifndef BASE_DIR
	# define BASE_DIR "/usr/lib/epos"
# endif
	OPTION (base_dir, "base_dir", STR, stringify(BASE_DIR))// base path to everything
# undef strfy
# undef stringify




OPTION (use_dbg,    "use_debug",  BOOL, false)  // Whether to print any debug info at all

OPTION (interf_dbg, "interf_debug",INT, 3)      // Debugging levels of various
OPTION (rules_dbg,  "rules_debug", INT, 3)      // code categories. See debug.doc
OPTION (elem_dbg,   "elem_debug",  INT, 3)      // 
OPTION (subst_dbg,  "subst_debug", INT, 3)      // 
OPTION (assim_dbg,  "assim_debug", INT, 3)      // 
OPTION (split_dbg,  "split_debug", INT, 3)      // 
OPTION (parser_dbg, "parser_debug",INT, 3)      // 
OPTION (synth_dbg,  "synth_debug", INT, 3)	//
OPTION (cfg_dbg,    "cfg_debug",   INT, 4)	//
OPTION (daemon_dbg, "daemon_debug",INT, 3)	//

OPTION (focus_dbg,  "focus_debug", DEBUG_AREA, _NONE_) 
						// _DEBUG_AREA_ not affected by limit_debug 
OPTION (always_dbg, "always_debug",INT, 3)      // Always debug this level and upwards
OPTION (limit_dbg,  "limit_debug", INT, 0)      // Never debug under this level, unless focussed

OPTION (loaded, "",               BOOL, false)  // Do we have already compiled the .ini files?
OPTION (fixedfile,"fixed_ini_file",STR, "fixed.ini")
OPTION (inifile, "cfg_file",       STR, "epos.ini")	// What is our favourite .ini file?
OPTION (token_esc, "",             STR, "nt[eE\\ #;@~.-mXYZ")	// Escape sequences usable in the .ini files
OPTION (value_esc, "",             STR, "\n\t\033\033\033\\\377#;@\1\2\3\4\037\036\035")
OPTION (slash_esc, "",            CHAR, '/')	// Path separator ('/' or '\') .ini escape seq

OPTION (hash_full, "hashes_full",  INT, 100)    // How full should a hash table become?
OPTION (multi_subst,"multi_subst", INT, 100)    // How many substs should apply to a word?
OPTION (lowmemory, "memory_low",  BOOL, false)  // Should we free hash tables after first use?
OPTION (forking, "forking",	  BOOL, false)  // (UNIX only) Detach using a child process?
OPTION (asyncing, "asyncing",	  BOOL, false)  // (UNIX only) Close files using a child process?
OPTION (colored, "colored",       BOOL, false)  // Use the color escape sequences?
OPTION (languages, "languages",     STR, "")	// Which languages to provide?
OPTION (ml, "markup_language",  MARKUP, ML_NONE)// Are these ANSI escape seqs or the RTF ones?
OPTION (version, "version",	  BOOL, false)	// Print version info to stdshriek on startup?
OPTION (help, "help",		  BOOL, false)	// Print help on stdshriek and exit on startup?
OPTION (long_help, "long_help",   BOOL, false)	// Print also a simple list of long options?
OPTION (neuronet, "neuronet",     BOOL, false)  // Allow nnet_out()?
OPTION (trusted, "trusted",       BOOL, false)  // Are sanity checks in unit::sanity() unnecessary?
OPTION (paranoid, "paranoid",     BOOL, true)   // Are config files out to get us? (strict syntax)
OPTION (stml, "stml",	          BOOL, false)	// Input text are STML (as opposed to plain ASCII)?
OPTION (showrule, "show_rule",    BOOL, false)  // Print each rule before its application? DEBUGGING only!
OPTION (pausing, "pausing",       BOOL, false)  // Pause after each rule application?
OPTION (r_dbg_sh_all, "verbose",  BOOL, false)  // When dumping rules, print them all?
// OPTION (warnpause, "warn_pause",  BOOL, false)  // Pause after every warning?
OPTION (warnings, "warnings",     BOOL, false)	// Show warnings at all?
OPTION (allpointers,"ptr_trusted",BOOL, true)   // When sanity checking, allow any pointers?

OPTION (vars, "variables",         INT, 43)     // About how many variables in the rules?
OPTION (rules, "rules_in_block",   INT, 32)	// About how many rules in a block?
OPTION (mrw, "max_rule_weight",    INT, 900000)	// Maximum rule weight in a choice?
OPTION (max_line, "max_line_len",  INT, 512)	// How long may an input line be?
OPTION (scratch, "scratch_size",   INT, 512)	// How long may some temporary strings be?
OPTION (dev_txtlen,"dev_text_len", INT, 50000)  // How much data can we expect from a device?

OPTION (eof_char, "end_of_file",  CHAR, '\033') // Which key should terminate user input?


LNG_OPTION (rules_dir, rules_dir, "rules_dir", STR, ".")  // path to the rules and banner files
LNG_OPTION (hash_dir, hash_dir, "hash_dir",    STR, ".")  //  to the dictionaries
LNG_OPTION (input_dir, input_dir, "input_dir", STR, ".")  //  to the input file
// VOICE_OPTION (invent_dir, inv_dir, "invent_dir", STR, ".")  //  to the diphone inventories
LNG_OPTION (pros_dir, pros_dir, "prosody_dir", STR, ".")  //  to the prosody files
OPTION (pseudo_root_dir, "pseudo_root_dir",STR, "root")	  //  to the virtual file tree
OPTION (help_dir, "ttscp_help_dir",    STR, "ttscp/help") //  to the ttscp help topics
OPTION (lang_base_dir, "lang_base_dir",    STR, "lng")    //  to the language descriptions
OPTION (voice_base_dir, "voice_base_dir",  STR, "voice")  //  to the voice descriptions
OPTION (inv_base_dir, "inv_base_dir",  STR, "inv")	  //  to the diphone inventories
OPTION (ini_dir, "ini_dir",	   STR, "cfg")  //      to fixed.ini
OPTION (matlab_dir, "matlab_dir",  STR, ".")	//      where to store nnet output
OPTION (wav_dir, "wav_dir",        STR, ".")	//      where to store .wav files
LNG_OPTION (input_file, input_file, "input_file",  STR, NULL)   // relative filename of the input text
OPTION (input_text, "",            STR, NULL)			// the input text itself
LNG_OPTION (rules_file, rules_file, "rules_file",  STR, NULL)   // relative filename of the rules text
OPTION (nnet_file, "nnet_file",    STR, NULL)	// relative filename of nnet output
OPTION (stddbg_file, "stddbg_file",     STR, NULL)   // file to write debug info to (NULL...stdout)
// OPTION (stdwarn_file, "stdwarn_file",   STR, NULL)   // file to write warnings to (NULL...stderr)
OPTION (stdshriek_file,"stdshriek_file",STR, NULL)   // file to write fatal errors to (NULL...std~err)

OPTION (trans, "show_transcript", BOOL, true)	// Should we display transcription on exit?
OPTION (show_phones,"show_phones",BOOL, false)	// Should we display the sounds on exit?
OPTION (use_diph,"",		  BOOL, true)	// (enabled if one of the following is on)
OPTION (show_diph,"show_diphones",BOOL, false)  // Should we display the diphones on exit?
OPTION (show_labels,"show_labels",BOOL, false)  // Should we display the diphone labels?
OPTION (play_diph,"play_diphones",BOOL, false)  // Should we write the sound to a file?
OPTION (diph_raw,"show_raw_diphs",BOOL, false)  // show_diphones including diphone numbers?
// OPTION (show_crc, "show_crc",     BOOL, false)	// Near-unique signature of the sound
OPTION (wav_file, "wave_file",     STR, NULL)	// File to write .wav into if play_diphones
OPTION (imm_diph,"immed_diphones",BOOL, false)  // Should we output them after a DIPHONES rule?

VOICE_OPTION (inv_name, name, "name",	   STR, "(unnamed)")
VOICE_OPTION (inv_type, type, "type",       TYPE, S_NONE)	// Int, float, vector quantified...
VOICE_OPTION (inv_ct,channel, "channel", CHANNEL, CT_MONO)// (unused; not stereo)
VOICE_OPTION (inv_counts, counts, "counts",  STR, NULL)	// File with the model counts for every diphone?
VOICE_OPTION (inv_models, models, "models",  STR, NULL)	// File with the models themselves?
VOICE_OPTION (inv_book, book, "codebook",    STR, NULL)	// No idea what this file is
VOICE_OPTION (inv_dph, dphfile, "dph_file",  STR, NULL)	// File describing the diphones?
VOICE_OPTION (inv_dpt, dptfile, "dpt_file",  STR, NULL)	// File naming the diphones?
VOICE_OPTION (inv_f0, init_f, "init_f",      INT, 100)	// Neutral frequency for the inventory
VOICE_OPTION (inv_i0, init_i, "init_i",      INT, 100)	// Neutral intensity
VOICE_OPTION (inv_t0, init_t, "init_t",      INT, 100)	// Neutral time factor
VOICE_OPTION (inv_st, st, "st_length",       INT, 400)	// Length of ST signals (ptdsyn)

VOICE_OPTION (inv_hz, samp_rate, "inv_sampling_rate", INT, 8000)	// The real sampling rate of the inventory
VOICE_OPTION (inv_samp_size, samp_size, "sample_size",INT, 16)	// (not supported)

OPTION (wav_hdr, "wave_header",	  BOOL, false)  // Should .wav output contain .wav file header?
// VOICE_OPTION (ioctlable, ioctlable, "ioctlable",	BOOL, false)  // Is the voice a real device not file?

OPTION (daemon_log, "daemon_log",  STR, NULL)	// Log file of daemon.cc activities (TTSCP server)
OPTION (pwdfile, "server_pwd_file",STR, NULL)	// File to store the server passwd for TTSCP auth
OPTION (dbg_pwd, "debug_password", STR, "")	// Additional server password (insecure)
OPTION (allow_file, "allow_options_file", STR, "allowed.ini") // options anonymous may change
OPTION (db_size, "diph_buff_size", INT, 511)	// max n of diphones to be synthesized at once
OPTION (buffer_size, "buffer_size",INT, 8192)	// buffer size for wave files
OPTION (max_net_cmd, "max_net_cmd",INT, 16384)  // Max TCP command length
OPTION (listen_port, "listen_port",INT, TTSCP_PORT) // TCP port where the daemon should listen
OPTION (handle_size, "handle_size",INT, 15)	// TTSCP handle size
OPTION (local_only, "local_only",  BOOL, true) // visible only to local clients ?
OPTION (deadlk_timeout, "deadlock_timeout", INT, 5)	// remote voice timeout
VOICE_OPTION (inv_loc, loc, "location", STR, "")
// OPTION (sd, "",		   INT, 0)	// network socket of the current session
						// (can also be used to detect the daemon mode)
OPTION (sd_in, "",		   INT, -1)	// current input network socket
OPTION (sd_out, "",		   INT, -1)	// current output network socket

OPTION (pend_min, "pend_min",	   INT, 3)	// FIXME: non-functional
OPTION (pend_max, "pend_max",	   INT, 7)	// FIXME: non-functional

LNG_OPTION (std_voices, voice_names, "voices", STR, "")	// voices supported for this language
LNG_OPTION (sft_opts, soft_option_names, "soft_options", STR, "")
				// language-specific voice options supported for this language
LNG_OPTION (fallback_voice, fallback_voice, "fallback_voice", STR, "")
				// voice to be used when the current one fails at run time

// OPTION (ktd_pitch, "ktd_pitch",    INT, 100)
// OPTION (ktd_speed, "ktd_speed",    INT, 4000)	//          FIXME

// OPTION (lowercase,"lower_case",    STR, NULL)   // Which characters are accepted as 
// OPTION (uppercase,"upper_case",    STR, NULL)   // denoting phones

OPTION (relax_input,"relax_input",BOOL, true)   // Survive unknown characters on input
OPTION (dflt_char, "default_char",CHAR, ' ')	// Replace them with this char

// OPTION (header_xscr, "header", FILE, "")     // Header and footer printed
// OPTION (footer_xscr, "footer", FILE, "")     //   in unit::fout()
OPTION (header_xscr, "header",     STR, "")     // Header and footer printed
OPTION (footer_xscr, "footer",     STR, "")     //   in unit::fout()

LNG_OPTION (syll_hack, syll_hack, "suppress_side_syll",  BOOL,  false)   
						// Try to avoid initial pseudo-syllables,
						// e.g. "j-sem", "r-men" in Czech
LNG_OPTION (limit_syll_hack, syll_thr, "limit_side_syll", CHAR, 'a') 
						// What sonority the initial phone must have
						// in order to become syllable peak? (Example)

OPTION (normal_col, "normal_color",   STR, "")
OPTION (curul_col, "curr_rule_color", STR, "")
OPTION (shriek_col, "fatal_color",    STR, "")
// OPTION (warn_col, "warning_color",    STR, "")

OPTION (shriek_art, "shriek_art",     INT, 0)	// Number of picture printed on fatal errors

OPTION (comma, "comma", 	      STR, "\n")// Delimiter character for generated lists

OPTION (unit_levels, "unit_levels",    STR, "")
OPTION (segm_level, "",              ELEM, 0)
OPTION (phone_level, "",             ELEM, 0)
OPTION (text_level, "",              ELEM, 0)
OPTION (default_scope, "default_scope",           ELEM, 0)
OPTION (default_target, "default_target",         ELEM, 0)


// LNG_OPTIONAGGR (const char *perm[UNIT_MAX])
// LNG_OPTIONITEM (perm[U_PHONE], "perm_phone", STR, "")
// LNG_OPTIONITEM (perm[U_SYLL], "perm_syll", STR, "")
// LNG_OPTIONITEM (perm[U_WORD], "perm_word", STR, "")
// LNG_OPTIONITEM (perm[U_COLON], "perm_colon", STR, "")
// LNG_OPTIONITEM (perm[U_SENT], "perm_sent", STR, "")
// LNG_OPTIONITEM (perm[U_TEXT], "perm_text", STR, "")
// LNG_OPTIONAGGRENDS

LNG_OPTIONARRAY (perm, "perm", STR, "", UNIT_MAX)

// OPTIONAGGR (int pros_weight[UNIT_MAX])
// OPTIONITEM (pros_weight[U_DIPH],"pros_weight_diph",INT,1)
// OPTIONITEM (pros_weight[U_PHONE],"pros_weight_phone",INT,1)
// OPTIONITEM (pros_weight[U_SYLL],"pros_weight_syll",INT,1)
// OPTIONITEM (pros_weight[U_WORD],"pros_weight_word",INT,1)
// OPTIONITEM (pros_weight[U_COLON],"pros_weight_colon",INT,1)
// OPTIONITEM (pros_weight[U_SENT],"pros_weight_sent",INT,1)
// OPTIONITEM (pros_weight[U_TEXT],"pros_weight_text",INT,1)
// OPTIONAGGRENDS

OPTIONARRAY (pros_weight, "pros_weight", INT, 1, UNIT_MAX)

// OPTION (pros_weights_denom, "sseg_weights_denom", INT, 1) never used, maybe some day

OPTIONAGGR (bool pros_mul[3])
OPTIONITEM (pros_mul[Q_FREQ], "pros_eff_multiply_f",	BOOL, true)
OPTIONITEM (pros_mul[Q_INTENS], "pros_eff_multiply_i",	BOOL, true)
OPTIONITEM (pros_mul[Q_TIME], "pros_eff_multiply_t",	BOOL, true)
OPTIONAGGRENDS

OPTIONAGGR (int pros_neutral[3])
OPTIONITEM (pros_neutral[Q_FREQ], "pros_neutral_f",	INT, 100) // Neutral (unmarked) frequency
OPTIONITEM (pros_neutral[Q_INTENS], "pros_neutral_i",   INT, 100) // Neutral intensity
OPTIONITEM (pros_neutral[Q_TIME], "pros_neutral_t",	INT, 100) // Neutral time factor
OPTIONAGGRENDS

// VOICE_OPTION (ti_adj, t_i_adjustments, "t_i_adj", BOOL, false)	// Adjust neutral time/intensity for some diphones



OPTION (out_verbose,"structured", BOOL, true)   // Will unit::fout display other units than phones?
OPTION (out_postfix, "postfix",   BOOL, false)  // Content char follows the offspring?
OPTION (out_prefix, "prefix",   BOOL, false)    // Content char precedes the offspring?
OPTION (out_swallow__, "swallow_underbars", BOOL, true) // Skip underbars to be printed?

// OPTIONAGGR (const char *out_opening[UNIT_MAX])
// OPTIONITEM (out_opening[U_DIPH],"",STR,"")
// OPTIONITEM (out_opening[U_PHONE],"begin_phone",STR,"")
// OPTIONITEM (out_opening[U_SYLL],"begin_syll",STR,"")
// OPTIONITEM (out_opening[U_WORD],"begin_word",STR,"")
// OPTIONITEM (out_opening[U_COLON],"begin_colon",STR,"")
// OPTIONITEM (out_opening[U_SENT],"begin_sent",STR,"")
// OPTIONITEM (out_opening[U_TEXT],"begin_text",STR,"")
// OPTIONAGGRENDS

OPTIONARRAY (out_opening, "begin", STR, "", UNIT_MAX)

// OPTIONAGGR (const char *out_separ[UNIT_MAX])
// OPTIONITEM (out_separ[U_DIPH],"",STR,"")
// OPTIONITEM (out_separ[U_PHONE],"separ_phone",STR,"")
// OPTIONITEM (out_separ[U_SYLL],"separ_syll",STR,"")
// OPTIONITEM (out_separ[U_WORD],"separ_word",STR,"")
// OPTIONITEM (out_separ[U_COLON],"separ_colon",STR,"")
// OPTIONITEM (out_separ[U_SENT],"separ_sent",STR,"")
// OPTIONITEM (out_separ[U_TEXT],"",STR,"")
// OPTIONAGGRENDS

OPTIONARRAY (out_separ, "separ", STR, "", UNIT_MAX)

// OPTIONAGGR (const char *out_closing[UNIT_MAX])
// OPTIONITEM (out_closing[U_DIPH],"",STR,"")
// OPTIONITEM (out_closing[U_PHONE],"close_phone",STR,"")
// OPTIONITEM (out_closing[U_SYLL],"close_syll",STR,"")
// OPTIONITEM (out_closing[U_WORD],"close_word",STR,"")
// OPTIONITEM (out_closing[U_COLON],"close_colon",STR,"")
// OPTIONITEM (out_closing[U_SENT],"close_sent",STR,"")
// OPTIONITEM (out_closing[U_TEXT],"close_text",STR,"")
// OPTIONAGGRENDS

OPTIONARRAY (out_closing, "close", STR, "", UNIT_MAX)

// OPTIONAGGR (const char *out_color[UNIT_MAX])
// OPTIONITEM (out_color[U_DIPH],"color_diphone",STR,"")
// OPTIONITEM (out_color[U_PHONE],"color_phone",STR,"")
// OPTIONITEM (out_color[U_SYLL],"color_syll",STR,"")
// OPTIONITEM (out_color[U_WORD],"color_word",STR,"")
// OPTIONITEM (out_color[U_COLON],"color_colon",STR,"")
// OPTIONITEM (out_color[U_SENT],"color_sent",STR,"")
// OPTIONITEM (out_color[U_TEXT],"color_text",STR,"")
// OPTIONAGGRENDS

OPTIONARRAY (out_color, "color", STR, "", UNIT_MAX)


#undef BOOL
#undef STR
#undef INT
#undef CHAR
#undef ELEM
// #undef FILE
#undef MARKUP
#undef TYPE
#undef CHANNEL
#undef DEBUG_AREA

#undef LNG_OPTIONARRAY
#undef OPTIONARRAY
#undef OPTIONAGGR
#undef OPTIONITEM
#undef OPTIONAGGRENDS
// #undef LNG_OPTIONAGGR
// #undef LNG_OPTIONITEM
// #undef LNG_OPTIONAGGRENDS
#undef OPTION
#undef VOICE_OPTION
#undef LNG_OPTION
